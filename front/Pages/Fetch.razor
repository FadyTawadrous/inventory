@inject HttpClient Http
@page "/fetch"

<h3>Products</h3>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                    <td>@product.Price.ToString("C")</td>
                </tr>
            }
        </tbody>
    </table>
}

<button @onclick="FetchUsers">Fetch Users</button>

@if (isLoading)
{
    <div class="spinner" role="status"></div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="error">@errorMessage</div>
}
else if (users != null)
{
    <ul>
        @foreach (var user in users)
        {
            <li>@user.Name (@user.Age)</li>
        }
    </ul>
}
else
{
    <p>No users found.</p>
}


@code {
    // Fetch Products Section
    private List<Product>? products;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            products = await Http.GetFromJsonAsync<List<Product>>("http://localhost:5113/products");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching products: {ex.Message}");
        }
    }

    // Fetch Users Section
    private List<User>? users;
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private CancellationTokenSource? cts;

    private async Task FetchUsers()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        cts?.Cancel(); // Cancel any previous request
        cts = new CancellationTokenSource();
        var token = cts.Token;

        try
        {
            await Task.Delay(2000, token); // Simulate a delay
            users = await Http.GetFromJsonAsync<List<User>>("http://localhost:5113/users", token);
            // https://jsonplaceholder.typicode.com/users?_limit=1
        }
        catch (TaskCanceledException)
        {
            errorMessage = "Request was canceled.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching users: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // Data Models
    public class Product
    {
        public int Id { get; set; }
        public required string Name { get; set; }
        public decimal Price { get; set; }
    }

    public class User
    {
        public string Name { get; set; } = string.Empty;
        public int Age { get; set; }
    }
}